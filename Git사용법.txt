Git 사용법

Git -> 내가 작업하는 파일들을 마치 평행우주처럼 git의 관리하에 놓는다는 것
(시간대 별로 작업한 거 별로 다 그 파일의 시점 그상태로 저장이 된다.)

1. git init -> 현재 폴더의 파일들을 Git의 관리하에 놓는다.

2. git status -> 현재 폴더의 파일 중 아직 저장하지 않는 파일 + 삭제한 파일 + 변경된 파일 + 새로 생긴파일을 알려줌

3. git config user.name "이름",  git config user.email "이메일" 을 통해 정보 입력

4. git add -> 타임캡슐에 저장하는 것 

5. git commit -m "message" =>  타임캡슐을 묻는 것   -> 타이캡슐에 저장하고 그시점의 파일을 저장

6. git log - > 현재까지의 저장 상태가 출력된다. -> 빠져나올땐 :q를 누르면 된다.

7. git reset (git log 해서 나온 내용 중 commit 일련번호의 앞 6자리만 복사해서 여기 적어줌) -- hard
 -> 그 시점으로 돌아가며 삭제됐던 파일이나 변경된 파일이 그 시점 상태로 돌아온다., 완전 삭제

8. git revert (6자리) -> 그 상태로 돌아가(돌아가기 전의 상태를 지우지 않고 그대로 둠) 
:wq입력(맥에서만) -> 그대로 저장, 

reset -> (과거1 - 과거2 -> 현재) 에서 과거 2로 돌아가면 -> (과거 1- 현재) 가 되지만
revert -> (과거1 - 과거2 -> 현재) 에서 과거 2로 돌아가면 -> (과거 1- 과거2 - 현재 - 과거2)가 된다. -> 현재를 그대로 두고 과거 2의 내용을 불러와서 새롭게 저장한다는 내용이 맞을 듯 ㅇㅇ
=-------------------------
여기 까지는 시간에 대한 내용
======================

!!!이제 평행우주다!!!!

branch -> 가지라는 뜻 !!

git branch "파일이름" -> 새로운 branch를 만들어서 원래 파일에는 영향이 가지 않도록 함

git checkout master -> 원래 branch로 돌아간다.

master branch로 돌아온 뒤,

git merge 합치고자 하는 branch명 입력 -> branch의 내용이 master에 그대로 반영된다.

git log --graph --all --decorate -> 우리가 작업한 평행우주의 내용을 상세히 보여준다.

!!! git merge시 같은 파일의 같은 부분을 따로따로 수정한 상태라면 merge시 두 파일의 다른 부분을 보여준다.

rebase -> merge 해서 복잡했던 병합, 분기 과정들이 한 줄로 재 배치 된다.

git branch -D 브랜치명 -> 브랜치 삭제
 
git push [저장소명] [브랜치명]